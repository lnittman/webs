// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id         String    @id @default(cuid())
  email      String    @unique
  name       String?
  accounts   Account[]
  sessions   Session[]
  workspaces WorkspaceUser[]
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  user               User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Workspace {
  id          String    @id @default(cuid())
  name        String
  description String?
  users       WorkspaceUser[]
  pages       Page[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model WorkspaceUser {
  id          String    @id @default(cuid())
  workspaceId String
  userId      String
  role        String    @default("member") // "owner", "admin", "member"
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@unique([workspaceId, userId])
}

model Page {
  id         String    @id @default(cuid())
  url        String    @unique
  title      String
  content    String
  fetchedAt  DateTime  @default(now())
  links      Link[]
  workspace  Workspace? @relation(fields: [workspaceId], references: [id])
  workspaceId String?
  contents   Content[]
}

model Link {
  id         String  @id @default(cuid())
  sourceId   String
  targetUrl  String
  processed  Boolean @default(false)
  source     Page    @relation(fields: [sourceId], references: [id], onDelete: Cascade)
}

model Content {
  id          String    @id @default(cuid())
  pageId      String
  page        Page      @relation(fields: [pageId], references: [id], onDelete: Cascade)
  type        String    // "text", "image", "code", etc.
  content     String
  metadata    String?   // JSON string for additional metadata
  embedding   String?   // Vector embedding as a JSON string
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
} 